ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"
git_url = ENV["MATCH_GIT_URL"]

fastlane_version "2.68.0"
default_platform :ios

########################################################
app_codename =                 ENV["DALILAH_CODENAME"]
app_number =                   ENV["DALILAH_APP_NUMBER"]
########################################################

app_id =                      "com.cmillerco.#{app_codename}"
xc_project =                  "#{app_codename}.xcodeproj"
xc_workspace =                "#{app_codename}.xcworkspace"
scheme =                      "#{app_codename}"
screenshot_scheme =           "#{app_codename}Screenshots"
internal_test_group =         "Dalilah Internal Beta"
external_test_group =         "Dalilah External Beta"


###  S C R E E N S H O T S  ###
#  pass in color options as:  "rose:true", etc 
lane :screens do |options|
      snapshot(
      scheme: "#{screenshot_scheme}",
      stop_after_first_error: true,
      concurrent_simulators: true,
      clear_previous_screenshots: true,
      output_directory: "./fastlane/screenshots",
      devices: ["iPhone 8 Plus",
                "iPhone X",
                "iPad Pro (12.9-inch)"],
      languages: ["en-US"]
      )

      frameit(
      rose_gold: true,
      path: './fastlane/screenshots')

      if options[:silver]
         frameit(
         silver: true,
         path: './fastlane/screenshots')
      end

      if options[:white]
         frameit(
         white: true,
         path: './fastlane/screenshots')
      end

      if options[:black]
         frameit(
         path: './fastlane/screenshots')
      end

      sh "scripts/move_framed_screens.sh"
end


lane :moveframed do
   sh "scripts/move_framed_screens.sh"
end


lane :frame do
      frameit(
      rose_gold: true,
      path: './fastlane/screenshots')
end


lane :uploadscreens do
      deliver(app: "#{app_number}",
              app_identifier: "#{app_id}",
              skip_metadata: true,
              skip_binary_upload: true,
              skip_app_version_update: true,
              force: true)
end



###  M I N I M A L   S C R E E N S H O T S  ###
lane :minscreens do
      snapshot(
      scheme: "#{screenshot_scheme}",
      stop_after_first_error: true,
      concurrent_simulators: true,
      clear_previous_screenshots: true,
      output_directory: "./fastlane/screenshots",
      devices: ["iPhone 8 Plus",
                "iPhone X"],
      languages: ["en-US"]
      )

      frameit(
      rose_gold: true,
      path: './fastlane/screenshots')

      sh "scripts/move_framed_screens.sh"
end




###  T E S T I N G  ###
lane :tests do
      run_tests(workspace: "#{xc_workspace}",
      devices: ["iPhone 8 Plus"],
      scheme: "#{scheme}")
end




###  D E V  ###
# Use this lane to send dev builds to FlightCheck for internal testing.

lane :dev do
   # update certificates
      match(git_url: "#{git_url}",
      type: "appstore",
      app_identifier: "#{app_id}")


   # increment_build_number
      ensure_git_status_clean
      increment_build_number(xcodeproj: "#{xc_project}")
      commit_version_bump(xcodeproj: "#{xc_project}")
      add_git_tag
      push_to_git_remote

   # build
      build_app(
      scheme: "#{scheme}",
      project: "#{xc_project}",
      include_bitcode: true
      )

   # upload to Testflight
      ipa = gym(scheme: "#{scheme}")
      testflight(
      ipa: ipa,
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      )

end




###  B E T A  A P P  R E V I E W  ###
# Use this lane to request Beta App Review â€” it will also distribute to internal
# Beta testers. Once the app is approved, you can use the *beta* lane to distribute
# to external Beta testers.

lane :betareview do
   # ensure correct branch before proceeding
      ensure_git_branch(
         branch: "^release-"
      )

   # prompt for changelog
      changelog = prompt(
      text: "Changelog: ",
      multi_line_end_keyword: "ENDINPUT"
      )

   # update certificates
      match(git_url: "#{git_url}",
      type: "appstore",
      app_identifier: "#{app_id}")

   # cocoapods

   # increment_build_number
      ensure_git_status_clean
      increment_build_number(xcodeproj: "#{xc_project}")
      commit_version_bump(xcodeproj: "#{xc_project}")
      add_git_tag
      push_to_git_remote

   # build
      build_app(
      scheme: "#{scheme}",
      project: "#{xc_project}",
      include_bitcode: true
      )

   # upload to Testflight
      ipa = gym(scheme: "#{scheme}")
      testflight(
      ipa: ipa,
      changelog: changelog,
      groups: "#{internal_test_group}",
      distribute_external: true,
      skip_waiting_for_build_processing: false
      )
end




###  B E T A  ###
# Once app is approved via Beta App Review, use this lane to send beta builds to
# both internal & external Beta testers.

lane :beta do
   # ensure correct branch before proceeding
      ensure_git_branch(
         branch: "^release-"
      )

   # prompt for changelog
      changelog = prompt(
      text: "Changelog: ",
      multi_line_end_keyword: "ENDINPUT"
      )

   # update certificates
      match(git_url: "#{git_url}",
      type: "appstore",
      app_identifier: "#{app_id}")

   # cocoapods

   # increment_build_number
      ensure_git_status_clean
      increment_build_number(xcodeproj: "#{xc_project}")
      commit_version_bump(xcodeproj: "#{xc_project}")
      add_git_tag
      push_to_git_remote

   # build
      build_app(
      scheme: "#{scheme}",
      project: "#{xc_project}",
      include_bitcode: true
      )

   # upload to Testflight
      ipa = gym(scheme: "#{scheme}")
      testflight(
      ipa: ipa,
      changelog: changelog,
      groups: ["#{internal_test_group}", "#{external_test_group}"],
      distribute_external: true,
      skip_waiting_for_build_processing: false
      )
end

